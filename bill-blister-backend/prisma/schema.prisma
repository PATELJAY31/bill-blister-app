// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  EMPLOYEE
  ENGINEER
  APPROVER
  ADMIN
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Employee {
  id                Int      @id @default(autoincrement())
  firstName         String   @map("first_name")
  lastName          String   @map("last_name")
  role              UserRole @default(EMPLOYEE)
  reportingManagerId Int?    @map("reporting_manager_id")
  reportingManager  Employee? @relation("ReportingManager", fields: [reportingManagerId], references: [id])
  subordinates      Employee[] @relation("ReportingManager")
  phone             String?
  email             String   @unique
  dob               DateTime? @db.Date
  status            String   @default("active")
  loginName         String   @unique @map("login_name")
  passwordHash      String   @map("password_hash")
  head1             String?
  head2             String?
  joiningDate       DateTime? @map("joining_date") @db.Date
  leavingDate       DateTime? @map("leaving_date") @db.Date
  country           String?
  state             String?
  city              String?
  fullAddress1      String?  @map("full_address1")
  fullAddress2      String?  @map("full_address2")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  allocations       Allocation[]
  notifications     Notification[]

  @@map("employees")
}

model ExpenseType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  status      Boolean @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  allocations Allocation[]

  @@map("expense_types")
}

model Head1 {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  status    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("head1")
}

model Head2 {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  status    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("head2")
}

model Allocation {
  id              Int             @id @default(autoincrement())
  allocationDate  DateTime        @map("allocation_date") @db.Date
  empId           Int             @map("emp_id")
  expenseTypeId   Int             @map("expense_type_id")
  amount          Decimal         @db.Decimal(10, 2)
  remarks         String?
  billNumber      String?         @map("bill_number")
  billDate        DateTime?       @map("bill_date") @db.Date
  fileUrl         String?         @map("file_url")
  notes           String?
  statusEng       ApprovalStatus  @default(PENDING) @map("status_eng")
  notesEng        String?         @map("notes_eng")
  statusHo        ApprovalStatus  @default(PENDING) @map("status_ho")
  notesHo         String?         @map("notes_ho")
  originalBill    Boolean         @default(false) @map("original_bill")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  // Relations
  employee        Employee        @relation(fields: [empId], references: [id], onDelete: Cascade)
  expenseType     ExpenseType     @relation(fields: [expenseTypeId], references: [id], onDelete: Cascade)

  @@map("allocations")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      Employee @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}