// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  EMPLOYEE
  ENGINEER
  HO_APPROVER
  ADMIN
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AllocationStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

model Employee {
  id                Int      @id @default(autoincrement())
  firstName         String   @map("first_name")
  lastName          String   @map("last_name")
  email             String   @unique
  phone             String?
  role              UserRole @default(EMPLOYEE)
  reportingManagerId Int?    @map("reporting_manager_id")
  reportingManager  Employee? @relation("ReportingManager", fields: [reportingManagerId], references: [id])
  subordinates      Employee[] @relation("ReportingManager")
  passwordHash      String   @map("password_hash")
  loginName         String   @unique @map("login_name")
  dob               DateTime? @db.Date
  status            String   @default("ACTIVE")
  head1             String?
  head2             String?
  joiningDate       DateTime? @map("joining_date") @db.Date
  leavingDate       DateTime? @map("leaving_date") @db.Date
  country           String?
  state             String?
  city              String?
  fullAddress1      String?  @map("full_address1")
  fullAddress2      String?  @map("full_address2")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  allocations       Allocation[]
  claims            Claim[]
  verifiedClaims    Claim[]     @relation("VerifiedBy")
  approvedClaims    Claim[]     @relation("ApprovedBy")
  notifications     Notification[]

  @@map("employees")
}

model ExpenseType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  status      Boolean @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  allocations Allocation[]
  claims      Claim[]

  @@map("expense_types")
}

model Allocation {
  id              Int             @id @default(autoincrement())
  allocationDate  DateTime        @map("allocation_date") @db.Date
  employeeId      Int             @map("employee_id")
  expenseTypeId   Int             @map("expense_type_id")
  amount          Decimal         @db.Decimal(10, 2)
  remarks         String?
  billNumber      String?         @map("bill_number")
  billDate        DateTime?       @map("bill_date") @db.Date
  fileUrl         String?         @map("file_url")
  notes           String?
  status          AllocationStatus @default(ACTIVE)
  statusEng       String?         @map("status_eng")
  notesEng        String?         @map("notes_eng")
  statusHo        String?         @map("status_ho")
  notesHo         String?         @map("notes_ho")
  originalBill    Boolean         @default(false) @map("original_bill")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  // Relations
  employee        Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  expenseType     ExpenseType     @relation(fields: [expenseTypeId], references: [id], onDelete: Cascade)
  claims          Claim[]

  @@map("allocations")
}

model Claim {
  id              Int         @id @default(autoincrement())
  employeeId      Int         @map("employee_id")
  expenseTypeId   Int         @map("expense_type_id")
  allocationId    Int?        @map("allocation_id")
  amount          Decimal     @db.Decimal(10, 2)
  description     String?
  billNumber      String?     @map("bill_number")
  billDate        DateTime    @map("bill_date") @db.Date
  fileUrl         String?     @map("file_url")
  notes           String?
  status          ClaimStatus @default(PENDING)
  verifiedById    Int?        @map("verified_by_id")
  verifiedAt      DateTime?   @map("verified_at")
  verifiedNotes   String?     @map("verified_notes")
  approvedById    Int?        @map("approved_by_id")
  approvedAt      DateTime?   @map("approved_at")
  approvedNotes   String?     @map("approved_notes")
  rejectionReason String?     @map("rejection_reason")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  employee        Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  expenseType     ExpenseType @relation(fields: [expenseTypeId], references: [id], onDelete: Cascade)
  allocation      Allocation? @relation(fields: [allocationId], references: [id], onDelete: SetNull)
  verifiedBy      Employee?   @relation("VerifiedBy", fields: [verifiedById], references: [id])
  approvedBy      Employee?   @relation("ApprovedBy", fields: [approvedById], references: [id])

  @@map("claims")
}

model Notification {
  id          Int      @id @default(autoincrement())
  employeeId  Int      @map("employee_id")
  title       String
  message     String
  type        String   @default("INFO") // INFO, SUCCESS, WARNING, ERROR
  isRead      Boolean  @default(false) @map("is_read")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("notifications")
}